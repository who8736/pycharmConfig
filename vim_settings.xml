<application>
  <component name="VimEditorSettings">
    <editor />
  </component>
  <component name="VimHistorySettings">
    <history>
      <history-search>
        <entry>valuation</entry>
        <entry>calpfnew</entry>
        <entry>ts</entry>
        <entry>ohlc</entry>
        <entry>pebuy</entry>
        <entry>start</entry>
        <entry>fixes</entry>
        <entry encoding="base64">YnRuLWxhcmdlIA==</entry>
        <entry encoding="base64">YnRuIA==</entry>
        <entry>cross</entry>
        <entry>1</entry>
        <entry>model_main</entry>
        <entry encoding="base64">XDxlbmNvZGVfdXRmOFw+</entry>
        <entry>inc_adf_linea</entry>
        <entry>inc_adf_linear</entry>
        <entry>reshape</entry>
        <entry>gridspec</entry>
        <entry>math</entry>
        <entry>del_</entry>
        <entry>readTa</entry>
      </history-search>
      <history-cmd>
        <entry encoding="base64">JzwsJz5zLyQvLCQvZw==</entry>
        <entry encoding="base64">JzwsJz5zLyQvLC9n</entry>
        <entry encoding="base64">JzwsJz5zLyA9LycsL2c=</entry>
        <entry encoding="base64">JzwsJz5zLywkL1xdLC9n</entry>
        <entry>s/start/end/g</entry>
        <entry encoding="base64">JzwsJz5zL2J0bi1sYXJnZSAvLw==</entry>
        <entry encoding="base64">JzwsJz5zL2J0biAvLw==</entry>
        <entry>s/1/2/g</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
  </component>
  <component name="VimKeySettings">
    <shortcut-conflicts>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed C</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed OPEN_BRACKET</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed S</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed X</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed CLOSE_BRACKET</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed Y</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed Q</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed U</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed H</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed J</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed T</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed G</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed K</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed O</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed W</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed I</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
  <component name="VimMarksSettings">
    <globalmarks />
    <filemarks>
      <file name="/Dummy.txt" timestamp="1587720597387">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="/Python Console" timestamp="1587687947391">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="/fragment.py" timestamp="1587612520330">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="D:/workspace/stockdatamanage/test/linear_regression.py" timestamp="1587540225443">
        <mark key="'" line="85" column="22" />
        <mark key="[" line="887" column="16" />
        <mark key="]" line="840" column="14" />
        <mark key="." line="840" column="13" />
        <mark key="^" line="840" column="14" />
      </file>
      <file name="/a.dummy" timestamp="1587633325158">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="1" />
        <mark key="." line="0" column="1" />
        <mark key="^" line="0" column="5" />
      </file>
      <file name="D:/workspace/stockdatamanage/download.py" timestamp="1587686524099">
        <mark key="'" line="67" column="13" />
        <mark key="[" line="105" column="59" />
        <mark key="]" line="106" column="54" />
        <mark key="^" line="106" column="54" />
        <mark key="." line="106" column="53" />
      </file>
      <file name="D:/workspace/python/stockdatamanage/rundownmisc.sh" timestamp="1587216747364">
        <mark key="[" line="1" column="8" />
        <mark key="]" line="1" column="8" />
        <mark key="." line="1" column="8" />
      </file>
      <file name="D:/workspace/stockdatamanage/downloadmisc.py" timestamp="1587865894758">
        <mark key="'" line="53" column="21" />
        <mark key="[" line="61" column="36" />
        <mark key="]" line="61" column="40" />
        <mark key="^" line="61" column="40" />
        <mark key="." line="61" column="39" />
      </file>
      <file name="D:/workspace/python/stockdatamanage/run.sh" timestamp="1587216739309">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="1" column="21" />
      </file>
      <file name="D:/workspace/stockdatamanage/sqlrw.py" timestamp="1587692797626">
        <mark key="[" line="280" column="0" />
        <mark key="]" line="280" column="16" />
        <mark key="." line="280" column="16" />
        <mark key="^" line="1146" column="38" />
      </file>
      <file name="D:/workspace/python/stockdatamanage/test/sklearn_examples_plot_anomaly_comparison.py" timestamp="1587294921769">
        <mark key="[" line="79" column="45" />
        <mark key="]" line="80" column="24" />
        <mark key="^" line="80" column="24" />
        <mark key="." line="80" column="23" />
      </file>
      <file name="D:/workspace/python/stockdatamanage/test/index_technical_indicators.py" timestamp="1587264320713">
        <mark key="'" line="765" column="22" />
        <mark key="[" line="810" column="29" />
        <mark key="]" line="810" column="34" />
        <mark key="^" line="810" column="34" />
        <mark key="." line="810" column="33" />
      </file>
      <file name="D:/workspace/python/stockdatamanage/test/linear_regression.py" timestamp="1587394238321">
        <mark key="'" line="749" column="6" />
        <mark key="[" line="840" column="14" />
        <mark key="]" line="840" column="14" />
        <mark key="." line="840" column="14" />
        <mark key="^" line="840" column="13" />
      </file>
      <file name="D:/workspace/stockdatamanage/check.py" timestamp="1587522319535">
        <mark key="[" line="38" column="30" />
        <mark key="]" line="48" column="0" />
        <mark key="." line="48" column="0" />
        <mark key="^" line="47" column="51" />
      </file>
      <file name="D:/workspace/python/stockdatamanage/runweb.py" timestamp="1587258099649">
        <mark key="[" line="15" column="0" />
        <mark key="]" line="15" column="0" />
        <mark key="." line="15" column="0" />
      </file>
      <file name="D:/workspace/python/stockdatamanage/sqlrw.py" timestamp="1587259041981">
        <mark key="[" line="1519" column="27" />
        <mark key="]" line="1519" column="27" />
        <mark key="." line="1519" column="27" />
        <mark key="^" line="1519" column="21" />
      </file>
      <file name="D:/workspace/stockdatamanage/datatrans.py" timestamp="1587613432218">
        <mark key="[" line="239" column="0" />
        <mark key="]" line="239" column="12" />
        <mark key="^" line="238" column="37" />
        <mark key="." line="239" column="12" />
      </file>
      <file name="D:/workspace/python/stockdatamanage/startdownmisc" timestamp="1587217095814">
        <mark key="[" line="1" column="79" />
        <mark key="]" line="1" column="86" />
        <mark key="." line="1" column="86" />
        <mark key="^" line="1" column="82" />
      </file>
      <file name="D:/workspace/stockdatamanage/test/mytest.py" timestamp="1587608694591">
        <mark key="'" line="614" column="0" />
      </file>
      <file name="D:/workspace/python/stockdatamanage/startstockmanage" timestamp="1587216407936">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="1" column="114" />
      </file>
    </filemarks>
    <jumps>
      <jump line="31" column="16" filename="D:/workspace/stockdatamanage/backtest.py" />
      <jump line="44" column="64" filename="D:/workspace/stockdatamanage/backtest.py" />
      <jump line="61" column="43" filename="D:/workspace/stockdatamanage/backtest.py" />
      <jump line="72" column="12" filename="D:/workspace/stockdatamanage/backtest.py" />
      <jump line="30" column="16" filename="D:/workspace/stockdatamanage/backtest.py" />
      <jump line="252" column="12" filename="D:/workspace/stockdatamanage/backtest.py" />
      <jump line="286" column="36" filename="D:/workspace/stockdatamanage/backtest.py" />
      <jump line="524" column="0" filename="D:/workspace/stockdatamanage/plot.py" />
      <jump line="112" column="29" filename="D:/workspace/stockdatamanage/web/views.py" />
      <jump line="115" column="17" filename="D:/workspace/stockdatamanage/web/views.py" />
      <jump line="0" column="15" filename="D:/workspace/stockdatamanage/web/templates/base.html" />
      <jump line="20" column="12" filename="D:/workspace/stockdatamanage/web/templates/base.html" />
      <jump line="67" column="12" filename="D:/workspace/stockdatamanage/web/templates/base.html" />
      <jump line="71" column="8" filename="D:/workspace/stockdatamanage/web/templates/base.html" />
      <jump line="50" column="0" filename="D:/workspace/stockdatamanage/web/templates/base.html" />
      <jump line="66" column="24" filename="D:/workspace/stockdatamanage/web/templates/base.html" />
      <jump line="38" column="0" filename="D:/workspace/stockdatamanage/mytest.py" />
      <jump line="538" column="0" filename="D:/workspace/stockdatamanage/plot.py" />
      <jump line="106" column="67" filename="D:/workspace/stockdatamanage/mytest.py" />
      <jump line="67" column="19" filename="D:/workspace/stockdatamanage/mytest.py" />
      <jump line="767" column="19" filename="D:/workspace/stockdatamanage/mytest.py" />
      <jump line="684" column="20" filename="D:/workspace/stockdatamanage/mytest.py" />
      <jump line="536" column="16" filename="D:/workspace/stockdatamanage/plot.py" />
      <jump line="35" column="0" filename="D:/workspace/pandastest/cleandata.py" />
      <jump line="57" column="4" filename="D:/workspace/pandastest/cleandata.py" />
      <jump line="0" column="16" filename="/Python Console" />
      <jump line="86" column="4" filename="D:/workspace/stockdatamanage/test/linear_regression.py" />
      <jump line="208" column="17" filename="D:/workspace/stockdatamanage/test/linear_regression.py" />
      <jump line="571" column="4" filename="D:/workspace/stockdatamanage/test/linear_regression.py" />
      <jump line="377" column="27" filename="D:/workspace/stockdatamanage/test/linear_regression.py" />
      <jump line="611" column="7" filename="D:/workspace/stockdatamanage/test/linear_regression.py" />
      <jump line="713" column="11" filename="D:/workspace/python/stockdatamanage/test/index_technical_indicators.py" />
      <jump line="9" column="32" filename="D:/workspace/python/stockdatamanage/test/index_technical_indicators.py" />
      <jump line="728" column="21" filename="D:/workspace/python/stockdatamanage/test/index_technical_indicators.py" />
      <jump line="758" column="19" filename="D:/workspace/python/stockdatamanage/test/index_technical_indicators.py" />
      <jump line="26" column="13" filename="D:/workspace/python/stockdatamanage/test/index_technical_indicators.py" />
      <jump line="106" column="49" filename="D:/workspace/python/stockdatamanage/test/index_technical_indicators.py" />
      <jump line="800" column="8" filename="D:/workspace/python/stockdatamanage/test/index_technical_indicators.py" />
      <jump line="784" column="8" filename="D:/workspace/python/stockdatamanage/test/index_technical_indicators.py" />
      <jump line="777" column="12" filename="D:/workspace/python/stockdatamanage/test/index_technical_indicators.py" />
      <jump line="776" column="0" filename="D:/workspace/python/stockdatamanage/test/index_technical_indicators.py" />
      <jump line="782" column="12" filename="D:/workspace/python/stockdatamanage/test/index_technical_indicators.py" />
      <jump line="66" column="0" filename="D:/workspace/python/stockdatamanage/test/index_technical_indicators.py" />
      <jump line="107" column="16" filename="D:/workspace/python/stockdatamanage/test/index_technical_indicators.py" />
      <jump line="142" column="0" filename="D:/workspace/python/stockdatamanage/test/scaling_test.py" />
      <jump line="84" column="38" filename="D:/workspace/python/stockdatamanage/test/index_technical_indicators.py" />
      <jump line="209" column="15" filename="D:/workspace/python/stockdatamanage/test/index_technical_indicators.py" />
      <jump line="810" column="26" filename="D:/workspace/python/stockdatamanage/test/index_technical_indicators.py" />
      <jump line="164" column="33" filename="D:/workspace/python/stockdatamanage/web/views.py" />
      <jump line="188" column="0" filename="D:/workspace/python/stockdatamanage/web/views.py" />
      <jump line="167" column="13" filename="D:/workspace/python/stockdatamanage/web/views.py" />
      <jump line="12" column="32" filename="D:/workspace/python/stockdatamanage/web/views.py" />
      <jump line="651" column="3" filename="D:/workspace/python/stockdatamanage/test/linear_regression.py" />
      <jump line="700" column="4" filename="D:/workspace/python/stockdatamanage/test/linear_regression.py" />
      <jump line="269" column="0" filename="D:/workspace/python/stockdatamanage/test/linear_regression.py" />
      <jump line="24" column="0" filename="D:/workspace/python/stockdatamanage/test/linear_regression.py" />
      <jump line="683" column="12" filename="D:/workspace/python/stockdatamanage/test/linear_regression.py" />
      <jump line="686" column="30" filename="D:/workspace/python/stockdatamanage/test/linear_regression.py" />
      <jump line="691" column="15" filename="D:/workspace/python/stockdatamanage/test/linear_regression.py" />
      <jump line="718" column="4" filename="D:/workspace/python/stockdatamanage/test/linear_regression.py" />
      <jump line="765" column="22" filename="D:/workspace/python/stockdatamanage/test/index_technical_indicators.py" />
      <jump line="19" column="49" filename="D:/workspace/python/stockdatamanage/test/linear_regression.py" />
      <jump line="725" column="13" filename="D:/workspace/python/stockdatamanage/test/linear_regression.py" />
      <jump line="20" column="29" filename="D:/workspace/python/stockdatamanage/test/linear_regression.py" />
      <jump line="468" column="20" filename="D:/workspace/python/stockdatamanage/test/linear_regression.py" />
      <jump line="580" column="16" filename="D:/workspace/python/stockdatamanage/test/linear_regression.py" />
      <jump line="735" column="18" filename="D:/workspace/python/stockdatamanage/test/linear_regression.py" />
      <jump line="222" column="9" filename="D:/workspace/python/stockdatamanage/test/linear_regression.py" />
      <jump line="751" column="21" filename="D:/workspace/python/stockdatamanage/test/linear_regression.py" />
      <jump line="752" column="24" filename="D:/workspace/python/stockdatamanage/test/linear_regression.py" />
      <jump line="10" column="30" filename="D:/workspace/python/stockdatamanage/test/linear_regression.py" />
      <jump line="174" column="9" filename="D:/workspace/python/stockdatamanage/test/linear_regression.py" />
      <jump line="320" column="9" filename="D:/workspace/python/stockdatamanage/test/linear_regression.py" />
      <jump line="434" column="11" filename="D:/workspace/python/stockdatamanage/test/linear_regression.py" />
      <jump line="765" column="6" filename="D:/workspace/python/stockdatamanage/test/linear_regression.py" />
      <jump line="5" column="0" filename="D:/workspace/python/stockdatamanage/test/linear_regression.py" />
      <jump line="767" column="18" filename="D:/workspace/python/stockdatamanage/test/linear_regression.py" />
      <jump line="4" column="30" filename="D:/workspace/python/stockdatamanage/test/linear_regression.py" />
      <jump line="740" column="16" filename="D:/workspace/python/stockdatamanage/test/linear_regression.py" />
      <jump line="21" column="47" filename="D:/workspace/python/stockdatamanage/test/linear_regression.py" />
      <jump line="749" column="6" filename="D:/workspace/python/stockdatamanage/test/linear_regression.py" />
      <jump line="807" column="37" filename="D:/workspace/stockdatamanage/test/linear_regression.py" />
      <jump line="822" column="13" filename="D:/workspace/stockdatamanage/test/linear_regression.py" />
      <jump line="85" column="22" filename="D:/workspace/stockdatamanage/test/linear_regression.py" />
      <jump line="796" column="28" filename="D:/workspace/stockdatamanage/test/mytest.py" />
      <jump line="614" column="0" filename="D:/workspace/stockdatamanage/test/mytest.py" />
      <jump line="549" column="0" filename="D:/workspace/stockdatamanage/sqlrw.py" />
      <jump line="50" column="17" filename="D:/workspace/stockdatamanage/sqlrw.py" />
      <jump line="109" column="0" filename="D:/workspace/stockdatamanage/sqlrw.py" />
      <jump line="192" column="0" filename="D:/workspace/stockdatamanage/sqlrw.py" />
      <jump line="290" column="0" filename="D:/workspace/stockdatamanage/sqlrw.py" />
      <jump line="298" column="0" filename="D:/workspace/stockdatamanage/sqlrw.py" />
      <jump line="491" column="0" filename="D:/workspace/stockdatamanage/sqlrw.py" />
      <jump line="748" column="0" filename="D:/workspace/stockdatamanage/sqlrw.py" />
      <jump line="909" column="4" filename="D:/workspace/stockdatamanage/sqlrw.py" />
      <jump line="0" column="0" filename="/a.dummy" />
      <jump line="142" column="43" filename="D:/workspace/stockdatamanage/download.py" />
      <jump line="37" column="19" filename="D:/workspace/stockdatamanage/download.py" />
      <jump line="67" column="13" filename="D:/workspace/stockdatamanage/download.py" />
      <jump line="53" column="21" filename="D:/workspace/stockdatamanage/downloadmisc.py" />
    </jumps>
  </component>
  <component name="VimRegisterSettings">
    <registers>
      <register name="&quot;" type="4">
        <text>replace</text>
      </register>
      <register name="-" type="4">
        <text>replace</text>
      </register>
      <register name="/" type="4">
        <text>readTa</text>
      </register>
      <register name="0" type="2">
        <text encoding="base64">ICAgIHByaW50KGYnu7nUrb751rU6e2V4cChtdTEpOi4yZn0sICcsCiAgICAgICAgICBmJ7XN1rU6e2V4cChtdTEpIC0gMiAqIGV4cChzaWdtYTEpOi4yZn0sICcKICAgICAgICAgIGYnuN/WtTp7ZXhwKG11MSkgKyAyICogZXhwKHNpZ21hMSk6LjJmfScpCg==</text>
      </register>
      <register name="1" type="2">
        <text encoding="base64">ICAgICAgICB0YWJsZXMgPSBbJ2JhbGFuY2VzaGVldCcsICdpbmNvbWUnLCAnY2FzaGZsb3cnLCAnZmluYV9pbmRpY2F0b3InXQo=</text>
      </register>
      <register name="2" type="2">
        <text encoding="base64">ICAgIHRhYmxlcyA9IFsnYmFsYW5jZXNoZWV0JywgJ2luY29tZScsICdjYXNoZmxvdycsICdmaW5hX2luZGljYXRvciddCg==</text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">ICAgIHRhYmxlcyA9IFsnYmFsYW5jZXNoZWV0JywgJ2luY29tZScsICdjYXNoZmxvdycsICdmaW5hX2luZGljYXRvciddCg==</text>
      </register>
      <register name="4" type="4">
        <text encoding="base64"></text>
      </register>
      <register name="5" type="4">
        <text encoding="base64"></text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">ICAgIGxpbWl0OiDIodfuvfzG2sr9tcTK/b7dCg==</text>
      </register>
      <register name="7" type="2">
        <text encoding="base64">ICAgIHN0b2NrTGlzdDogCg==</text>
      </register>
      <register name="8" type="2">
        <text encoding="base64">IyBkZWYgdXBkYXRlTGlydW4oKToKIyAgICAgc3RhcnRRdWFydGVyID0gZ2V0TGlydW5VcGRhdGVTdGFydFF1YXJ0ZXIoKQojICAgICBlbmRRdWFydGVyID0gZ2V0TGlydW5VcGRhdGVFbmRRdWFydGVyKCkKIwojICAgICBkYXRlcyA9IGRhdGF0cmFucy5RdWFydGVyTGlzdChzdGFydFF1YXJ0ZXIsIGVuZFF1YXJ0ZXIpCiMgICAgIGZvciBkYXRlIGluIGRhdGVzOgojICAgICAgICAgIyAgICAgICAgIHByaW50IGRhdGUKIyAgICAgICAgIGxvZ2dpbmcuZGVidWcoJ3VwZGF0ZUxpcnVuOiAlcycsIGRhdGUpCiMgICAgICAgICB0cnk6CiMgICAgICAgICAgICAgZGYgPSBkb3dubG9hZExpcnVuKGRhdGUpCiMgICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoKIyAgICAgICAgICAgICBjb250aW51ZQojICAgICAgICAgaWYgZGYgaXMgTm9uZToKIyAgICAgICAgICAgICBjb250aW51ZQojICMgICAgICAgICBwcmludCBsZW4oZGYpCiMgICAgICAgICAjILbByKHS0bTmtKK1xMD7yPPK/b7do6y008/C1NjK/b7d1tDJvrP9uMOyv7fWo6y21M60tOa0orXEwPvI89C0yOvK/b7dv+IKIyAgICAgICAgIGxpcnVuQ3VyID0gcmVhZExpcnVuRm9yRGF0ZShkYXRlKQojICAgICAgICAgZGYgPSBkZlt+ZGYudHNfY29kZS5pc2luKGxpcnVuQ3VyLnRzX2NvZGUpXQojICAgICAgICAgZGYgPSBkZltkZi5wcm9maXRzLm5vdG51bGwoKV0KIyAjICAgICAgICAgcHJpbnQgZGYKIwojICAgICAgICAgIyC21M60tOa0orXEwPvI89C0yOvK/b7dv+KjrLKi1tjQwrzGy+NUVE3A+8jzCiMgICAgICAgICBpZiBub3QgZGYuZW1wdHk6CiMgICAgICAgICAgICAgd3JpdGVMaXJ1bihkZikKIyAgICAgICAgICAgICBjYWxBbGxUVE1MaXJ1bihkYXRlKQoKCiMg0snLxs7e08O6r8r9o6y0/cm+s/0KIyBkZWYgcmVhZEd1YmVuRnJvbURmKGRmLCBkYXRlKToKIyAgICAgIiIitNO5ybG+wdCx7dbQtsHIoda4tqjI1cbatcS5ybG+yv3WtQojICAgICAjINa4tqjI1cbazt65ybG+yv2+3cqxo6zRocih1q7HsNfuvfy1xLnJsb7K/b7dCiMgICAgICIiIgojICAgICBkID0gZGZbZGYuZGF0ZSA8PSBkYXRlXQojICAgICBpZiBkLmVtcHR5OgojICAgICAgICAgcmV0dXJuIE5vbmUKIyAgICAgZ3ViZW4gPSBkW2QuZGF0ZSA9PSBkWydkYXRlJ10ubWF4KCksICd0b3RhbHNoYXJlcyddCiMgIyAgICAgZ3ViZW4gPSBkLmlhdFswLCAzXQojICAgICByZXR1cm4gZ3ViZW4KCgo=</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">ZGVmIGRlbF9yZWFkVFRNTGlydW5Gcm9tRGYoZGYsIGRhdGUpOgogICAgIiIitNNUVE3A+8jzwdCx7dbQtsHIoda4tqjI1cbatcRUVE3A+8jzyv3WtQogICAgIyDWuLaoyNXG2s7eVFRNwPvI88r9vt3KsaOs0aHIodaux7DX7r38tcRUVE3A+8jzyv2+3QogICAgIiIiCiAgICBkID0gZGZbZGYucmVwb3J0ZGF0ZSA8PSBkYXRlXQogICAgaWYgZC5lbXB0eToKICAgICAgICByZXR1cm4gTm9uZQogICAgZCA9IGRbZC5yZXBvcnRkYXRlID09IGRbJ3JlcG9ydGRhdGUnXS5tYXgoKV0KICAgIHR0bUxpcnVuID0gZFtkLmRhdGUgPT0gZFsnZGF0ZSddLm1heCgpLCAndHRtcHJvZml0cyddCiAgICAjICAgICB0dG1MaXJ1biA9IGQuaWF0WzAsIDNdCiAgICByZXR1cm4gdHRtTGlydW4KCgo=</text>
      </register>
      <register name=":" type="4">
        <text>s/1/2/g</text>
      </register>
    </registers>
  </component>
  <component name="VimSearchSettings">
    <search>
      <last-search>readTa</last-search>
      <last-offset />
      <last-pattern>readTa</last-pattern>
      <last-replace>2</last-replace>
      <last-substitute>1</last-substitute>
      <last-dir>1</last-dir>
      <show-last>false</show-last>
    </search>
  </component>
  <component name="VimSettings">
    <state version="6" enabled="true" />
    <notifications>
      <idea-join enabled="true" />
      <idea-put enabled="false" />
    </notifications>
  </component>
</application>